import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Locale;
import java.util.Objects;

public class LoginForm extends JFrame {
    private JPanel panel;
    private JButton loginButton;
    private JButton registerNowButton;
    private JTextField usernameField;
    private JButton resetPasswordButton;
    private JPasswordField passwordField;

    public LoginForm() {
        super("ABBank Login");
        ImageIcon backgroundImage = new ImageIcon(Objects.requireNonNull(getImage("login_background.png")));
        this.setContentPane(new JLabel(backgroundImage));
        this.setLayout(new GridBagLayout());
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setSize(995, 588);
        panel.setOpaque(false);
        this.add(panel);
        this.setResizable(false);
        this.setVisible(true);
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                String username = usernameField.getText();
                String password = String.valueOf(passwordField.getPassword());
                if (username.equals("") || password.equals("")) {
                    JOptionPane.showMessageDialog(null, "Please enter your username and password!", "ERROR", JOptionPane.ERROR_MESSAGE);
                } else {
                    APIHandle apiHandle = APIHandle.getInstance();
                    if (apiHandle.signin(username, password)) {
                        JOptionPane.showMessageDialog(null, "Successfully Logged In!", "Welcome", JOptionPane.INFORMATION_MESSAGE);
                        transition();
                    } else {
                        JOptionPane.showMessageDialog(null, "Wrong username or password!", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        });
        registerNowButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                new SignupForm();
            }
        });
    }

    public static void main(String[] args) {
        new LoginForm();
//        new EditProfile();
    }

    private void transition() {
        this.setVisible(false);
        new CustomerForm();
    }

    private Image getImage(String filename) {
        try {
            return ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(
                    "/" + filename)));
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        panel.setEnabled(true);
        loginButton = new JButton();
        loginButton.setBackground(new Color(-3933677));
        loginButton.setText("Login");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 6;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(15, 0, 0, 45);
        panel.add(loginButton, gbc);
        registerNowButton = new JButton();
        registerNowButton.setBackground(new Color(-3933677));
        registerNowButton.setText("Register Now!");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridheight = 6;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 0, 430);
        panel.add(registerNowButton, gbc);
        usernameField = new JTextField();
        usernameField.setBackground(new Color(-5131595));
        usernameField.setColumns(14);
        Font usernameFieldFont = this.$$$getFont$$$(null, Font.BOLD, 12, usernameField.getFont());
        if (usernameFieldFont != null) usernameField.setFont(usernameFieldFont);
        usernameField.setForeground(new Color(-16777216));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 5;
        gbc.ipady = 5;
        gbc.insets = new Insets(18, 0, 20, 45);
        panel.add(usernameField, gbc);
        resetPasswordButton = new JButton();
        resetPasswordButton.setBackground(new Color(-14276018));
        resetPasswordButton.setEnabled(false);
        resetPasswordButton.setForeground(new Color(-3933677));
        resetPasswordButton.setText("Reset Password");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(12, 0, 0, 45);
        panel.add(resetPasswordButton, gbc);
        passwordField = new JPasswordField();
        passwordField.setBackground(new Color(-5131595));
        passwordField.setForeground(new Color(-16777216));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 5;
        gbc.ipady = 5;
        gbc.insets = new Insets(15, 0, 13, 45);
        panel.add(passwordField, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
