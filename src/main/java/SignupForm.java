import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.Objects;
import java.util.regex.*;
import java.util.*;

public class SignupForm extends JFrame {
    private JPanel panel;
    private JTextField firstName;
    private JTextField lastName;
    private JTextField username;
    private JTextField email;
    private JPasswordField password;
    private JPasswordField confirmpassword;
    private JButton registerButton;

    public SignupForm() {
        super("ABBank Signup");
        ImageIcon backgroundImage = new ImageIcon(Objects.requireNonNull(getImage("signup_background.png")));
        this.setContentPane(new JLabel(backgroundImage));
        this.setLayout(new GridBagLayout());
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setSize(995, 588);
        this.setLocationRelativeTo(null);
        panel.setOpaque(false);
        this.add(panel);
        this.setResizable(false);
        this.setVisible(true);
        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                String fname = firstName.getText();
                String lname = lastName.getText();
                String mail = email.getText();
                String uname = username.getText();
                String pwd = String.valueOf(password.getPassword());
                String cpwd = String.valueOf(confirmpassword.getPassword());
                if (fname.equals("") || lname.equals("") || mail.equals("") || uname.equals("")
                        || pwd.equals("") || cpwd.equals(""))
                    JOptionPane.showMessageDialog(null, "Please fill all the fields!", "ERROR", JOptionPane.ERROR_MESSAGE);
                else if (!validateName(fname) || !validateName(lname))
                    JOptionPane.showMessageDialog(null, "Please enter a valid name!", "ERROR", JOptionPane.ERROR_MESSAGE);
                else if (!validateEMail(mail))
                    JOptionPane.showMessageDialog(null, "Please enter a valid e-mail address!", "ERROR", JOptionPane.ERROR_MESSAGE);
                else if (!pwd.equals(cpwd))
                    JOptionPane.showMessageDialog(null, "Confirm password does not match password!", "ERROR", JOptionPane.ERROR_MESSAGE);
                else {
                    APIHandle apiHandle = APIHandle.getInstance();
                    if (apiHandle.signup(uname, fname, lname, mail, pwd)) {
                        JOptionPane.showMessageDialog(null, "Successfully created account! Please login", "Welcome", JOptionPane.INFORMATION_MESSAGE);
                        changeVis(false);
                    } else {
                        JOptionPane.showMessageDialog(null, "The username you have entered is taken", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }

            }
        });
    }

    public void changeVis(boolean to) {
        this.setVisible(to);
    }

    private boolean validateEMail(String mail) {
        String regex = "^(.+)@(.+)$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(mail);
        if (matcher.matches()) {
            return true;
        } else {
            return false;
        }
    }

    private boolean validateName(String name) {
        char[] chars = name.toCharArray();
        for (char c : chars) {
            if (Character.isDigit(c))
                return false;
        }
        return true;
    }

    private Image getImage(String filename) {
        try {
            return ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream(
                    "/" + filename)));
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        firstName = new JTextField();
        firstName.setBackground(new Color(-5131595));
        firstName.setColumns(16);
        Font firstNameFont = this.$$$getFont$$$(null, Font.BOLD, 14, firstName.getFont());
        if (firstNameFont != null) firstName.setFont(firstNameFont);
        firstName.setForeground(new Color(-16777216));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(34, 500, 0, 0);
        panel.add(firstName, gbc);
        lastName = new JTextField();
        lastName.setBackground(new Color(-5131595));
        lastName.setColumns(16);
        Font lastNameFont = this.$$$getFont$$$(null, Font.BOLD, 14, lastName.getFont());
        if (lastNameFont != null) lastName.setFont(lastNameFont);
        lastName.setForeground(new Color(-16777216));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(34, 500, 0, 0);
        panel.add(lastName, gbc);
        username = new JTextField();
        username.setBackground(new Color(-5131595));
        username.setColumns(16);
        Font usernameFont = this.$$$getFont$$$(null, Font.BOLD, 14, username.getFont());
        if (usernameFont != null) username.setFont(usernameFont);
        username.setForeground(new Color(-16777216));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(34, 500, 0, 0);
        panel.add(username, gbc);
        email = new JTextField();
        email.setBackground(new Color(-5131595));
        email.setColumns(16);
        Font emailFont = this.$$$getFont$$$(null, Font.BOLD, 14, email.getFont());
        if (emailFont != null) email.setFont(emailFont);
        email.setForeground(new Color(-16777216));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(34, 500, 0, 0);
        panel.add(email, gbc);
        password = new JPasswordField();
        password.setBackground(new Color(-5131595));
        password.setColumns(16);
        Font passwordFont = this.$$$getFont$$$(null, Font.BOLD, 14, password.getFont());
        if (passwordFont != null) password.setFont(passwordFont);
        password.setForeground(new Color(-16777216));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(34, 500, 0, 0);
        panel.add(password, gbc);
        confirmpassword = new JPasswordField();
        confirmpassword.setBackground(new Color(-5131595));
        confirmpassword.setColumns(16);
        Font confirmpasswordFont = this.$$$getFont$$$(null, Font.BOLD, 14, confirmpassword.getFont());
        if (confirmpasswordFont != null) confirmpassword.setFont(confirmpasswordFont);
        confirmpassword.setForeground(new Color(-16777216));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(34, 500, 0, 0);
        panel.add(confirmpassword, gbc);
        registerButton = new JButton();
        registerButton.setBackground(new Color(-3933677));
        registerButton.setText("Register");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 7;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipady = 10;
        gbc.insets = new Insets(24, 500, 0, 0);
        panel.add(registerButton, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        gbc.insets = new Insets(70, 0, 0, 0);
        panel.add(spacer1, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
